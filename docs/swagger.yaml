definitions:
  req.ActLogin:
    properties:
      mail:
        description: E-Mail address [required]
        type: string
      password:
        description: Password, for safety reason,the request should mix this parameter
          with encryption,such as MD5 and SHA256. [required]
        type: string
    required:
    - mail
    - password
    type: object
  req.ActRegister:
    properties:
      inviteCode:
        description: invite code [required]
        type: string
      mail:
        description: E-Mail address [required]
        type: string
      password:
        description: Password, for safety reason,the request should mix this parameter
          with encryption,such as MD5 and SHA256. [required]
        type: string
    required:
    - inviteCode
    - mail
    - password
    type: object
  req.ChangePassword:
    properties:
      password:
        description: Password, for safety reason,the request should mix this parameter
          with encryption,such as MD5 and SHA256. [required]
        type: string
      prePassword:
        description: PreviousPassword, for safety reason,the request should mix this
          parameter with encryption,such as MD5 and SHA256. [required]
        type: string
    required:
    - password
    - prePassword
    type: object
  req.SetPassword:
    properties:
      password:
        description: Password, for safety reason,the request should mix this parameter
          with encryption,such as MD5 and SHA256. [required]
        type: string
    required:
    - password
    type: object
  resp.ActLogin:
    properties:
      accountId:
        description: The ID of the account
        type: integer
      authorization:
        description: The authorization token for the account
        type: string
    type: object
  resp.ActRegister:
    properties:
      accountId:
        description: The ID of the account
        type: integer
      authorization:
        description: The authorization token for the account
        type: string
    type: object
  resp.Base:
    properties:
      code:
        description: the return code, 200 means OK, other codes mean failed
        type: integer
      msg:
        description: The simple description of the code, the request should NOT use
          this value directly, it must be translated to another suitable message
        type: string
    type: object
  resp.CaptchaGet:
    properties:
      captcha:
        description: The captcha image of request, in BASE64 format
        type: string
      nonce:
        description: The nonce key of the captcha
        type: string
    type: object
  resp.CheckCaptcha:
    properties:
      captchaNonce:
        description: The nonce value of the captcha check response
        type: string
      captchaNonceKey:
        description: The nonce key of the captcha check response
        type: string
    type: object
  resp.QRCodeImg:
    properties:
      image:
        description: The QRCode data, in BASE64 format
        type: string
    type: object
info:
  contact: {}
paths:
  /account/changePwd:
    post:
      consumes:
      - application/json
      description: Change the login password, remember user must be online when do
        this action, otherwise please see '/account/resetPassword'
      parameters:
      - description: The JWT (called 'authorization' in the return value) after user
          logged in
        in: header
        name: Authorization
        required: true
        type: string
      - description: ChangePassword
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Base'
      summary: User change the password while logged in
      tags:
      - Audience - Account Module
  /account/changeTradePwd:
    post:
      consumes:
      - application/json
      description: Change the trade password, remember user must be online when do
        this action
      parameters:
      - description: The JWT (called 'authorization' in the return value) after user
          logged in
        in: header
        name: Authorization
        required: true
        type: string
      - description: ChangePassword
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Base'
      summary: User change the trade password while logged in
      tags:
      - Audience - Account Module
  /account/login:
    post:
      consumes:
      - application/json
      description: User login action  with resp.ActLogin returned
      parameters:
      - description: ActLogin
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ActLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.ActLogin'
      summary: User login with mail and password
      tags:
      - Audience - Account Module
  /account/register:
    post:
      consumes:
      - application/json
      description: Provide mail,password and invite code to register as a new account
      parameters:
      - description: ActRegister
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ActRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.ActRegister'
      summary: User register as an account through this api
      tags:
      - Audience - Account Module
  /account/setTradePwd:
    post:
      consumes:
      - application/json
      description: Set the trade password, remember user must be online when do this
        action
      parameters:
      - description: The JWT (called 'authorization' in the return value) after user
          logged in
        in: header
        name: Authorization
        required: true
        type: string
      - description: SetPassword
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.SetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Base'
      summary: User set the trade password while logged in
      tags:
      - Audience - Account Module
  /captcha/check:
    get:
      consumes:
      - text/plain
      description: This interface checks the captcha code (called 'cc')
      parameters:
      - description: the id of the catpcha
        in: query
        name: ci
        required: true
        type: string
      - description: the letters on the captcha image, case insensitive
        in: query
        name: cc
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.CheckCaptcha'
      summary: Check the captchaCode
      tags:
      - Utilities-Captcha Module
  /captcha/get:
    get:
      consumes:
      - text/plain
      description: This interface returns an image data with the given parameters,
        the size of the request should be considered, can NOT be too high or too low.
      parameters:
      - description: the width of the image, default value is 100, max value should
          no more than 500. unit:px
        in: query
        name: w
        type: integer
      - description: the heigh of the image, default value is 30, max value should
          no more than 100. unit:px
        in: query
        name: h
        type: integer
      - description: the length of the letters shown on the image, default value is
          4, it should be in the zone of [4,8]
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.CaptchaGet'
      summary: Get a captcha image
      tags:
      - Utilities-Captcha Module
  /qrcode/gen:
    get:
      consumes:
      - text/plain
      description: Generates a QRCode image with the given text
      parameters:
      - description: The JWT (called 'authorization' in the return value) after user
          logged in
        in: header
        name: Authorization
        required: true
        type: string
      - description: the length of the square holding the QRCode image
        in: query
        name: size
        required: true
        type: string
      - description: the text of the QRCode image. if it is a http-url, it should
          be encoded with 'url-encode'
        in: query
        name: text
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.QRCodeImg'
      summary: QRCode generator
      tags:
      - Utilities-QRCode Module
swagger: "2.0"
